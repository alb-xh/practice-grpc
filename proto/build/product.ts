// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v3.21.12
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "product";

export enum StringFilterOperator {
  STRING_FILTER_OPERATOR_EQUAL = 0,
  STRING_FILTER_OPERATOR_NOT_EQUAL = 1,
  STRING_FILTER_OPERATOR_INCLUDES = 2,
  STRING_FILTER_OPERATOR_EXLUDES = 3,
  STRING_FILTER_OPERATOR_STARTS_WITH = 4,
  STRING_FILTER_OPERATOR_ENDS_WITH = 5,
  UNRECOGNIZED = -1,
}

export function stringFilterOperatorFromJSON(object: any): StringFilterOperator {
  switch (object) {
    case 0:
    case "STRING_FILTER_OPERATOR_EQUAL":
      return StringFilterOperator.STRING_FILTER_OPERATOR_EQUAL;
    case 1:
    case "STRING_FILTER_OPERATOR_NOT_EQUAL":
      return StringFilterOperator.STRING_FILTER_OPERATOR_NOT_EQUAL;
    case 2:
    case "STRING_FILTER_OPERATOR_INCLUDES":
      return StringFilterOperator.STRING_FILTER_OPERATOR_INCLUDES;
    case 3:
    case "STRING_FILTER_OPERATOR_EXLUDES":
      return StringFilterOperator.STRING_FILTER_OPERATOR_EXLUDES;
    case 4:
    case "STRING_FILTER_OPERATOR_STARTS_WITH":
      return StringFilterOperator.STRING_FILTER_OPERATOR_STARTS_WITH;
    case 5:
    case "STRING_FILTER_OPERATOR_ENDS_WITH":
      return StringFilterOperator.STRING_FILTER_OPERATOR_ENDS_WITH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StringFilterOperator.UNRECOGNIZED;
  }
}

export function stringFilterOperatorToJSON(object: StringFilterOperator): string {
  switch (object) {
    case StringFilterOperator.STRING_FILTER_OPERATOR_EQUAL:
      return "STRING_FILTER_OPERATOR_EQUAL";
    case StringFilterOperator.STRING_FILTER_OPERATOR_NOT_EQUAL:
      return "STRING_FILTER_OPERATOR_NOT_EQUAL";
    case StringFilterOperator.STRING_FILTER_OPERATOR_INCLUDES:
      return "STRING_FILTER_OPERATOR_INCLUDES";
    case StringFilterOperator.STRING_FILTER_OPERATOR_EXLUDES:
      return "STRING_FILTER_OPERATOR_EXLUDES";
    case StringFilterOperator.STRING_FILTER_OPERATOR_STARTS_WITH:
      return "STRING_FILTER_OPERATOR_STARTS_WITH";
    case StringFilterOperator.STRING_FILTER_OPERATOR_ENDS_WITH:
      return "STRING_FILTER_OPERATOR_ENDS_WITH";
    case StringFilterOperator.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Int32FilterOperator {
  INT_32_FILTER_OPERATOR_EQUAL = 0,
  INT_32_FILTER_OPERATOR_NOT_EQUAL = 1,
  INT_32_FILTER_OPERATOR_LARGER_THAN = 2,
  INT_32_FILTER_OPERATOR_SMALLER_THAN = 3,
  INT_32_FILTER_OPERATOR_BETWEEN = 4,
  UNRECOGNIZED = -1,
}

export function int32FilterOperatorFromJSON(object: any): Int32FilterOperator {
  switch (object) {
    case 0:
    case "INT_32_FILTER_OPERATOR_EQUAL":
      return Int32FilterOperator.INT_32_FILTER_OPERATOR_EQUAL;
    case 1:
    case "INT_32_FILTER_OPERATOR_NOT_EQUAL":
      return Int32FilterOperator.INT_32_FILTER_OPERATOR_NOT_EQUAL;
    case 2:
    case "INT_32_FILTER_OPERATOR_LARGER_THAN":
      return Int32FilterOperator.INT_32_FILTER_OPERATOR_LARGER_THAN;
    case 3:
    case "INT_32_FILTER_OPERATOR_SMALLER_THAN":
      return Int32FilterOperator.INT_32_FILTER_OPERATOR_SMALLER_THAN;
    case 4:
    case "INT_32_FILTER_OPERATOR_BETWEEN":
      return Int32FilterOperator.INT_32_FILTER_OPERATOR_BETWEEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Int32FilterOperator.UNRECOGNIZED;
  }
}

export function int32FilterOperatorToJSON(object: Int32FilterOperator): string {
  switch (object) {
    case Int32FilterOperator.INT_32_FILTER_OPERATOR_EQUAL:
      return "INT_32_FILTER_OPERATOR_EQUAL";
    case Int32FilterOperator.INT_32_FILTER_OPERATOR_NOT_EQUAL:
      return "INT_32_FILTER_OPERATOR_NOT_EQUAL";
    case Int32FilterOperator.INT_32_FILTER_OPERATOR_LARGER_THAN:
      return "INT_32_FILTER_OPERATOR_LARGER_THAN";
    case Int32FilterOperator.INT_32_FILTER_OPERATOR_SMALLER_THAN:
      return "INT_32_FILTER_OPERATOR_SMALLER_THAN";
    case Int32FilterOperator.INT_32_FILTER_OPERATOR_BETWEEN:
      return "INT_32_FILTER_OPERATOR_BETWEEN";
    case Int32FilterOperator.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Product {
  id: number;
  name: string;
  description: string;
  imageSrc: string;
  price: number;
  quantity: number;
}

export interface CreateProductInput {
  name: string;
  description: string;
  imageSrc: string;
  price: number;
  quantity: number;
}

export interface CreateProductOutput {
  id: number;
}

export interface GetProductInput {
  id: number;
}

export interface GetProductOutput {
  product: Product | undefined;
}

export interface StringFilter {
  operator: StringFilterOperator;
  value: string;
}

export interface Int32Range {
  from: number;
  to: number;
}

export interface Int32Filter {
  operator: Int32FilterOperator;
  value?: number | undefined;
  range?: Int32Range | undefined;
}

export interface ListFilter {
  id?: number | undefined;
  name?: StringFilter | undefined;
  price?: Int32Filter | undefined;
  inStock?: boolean | undefined;
}

export interface ListProductsInput {
  filters: ListFilter[];
}

export interface ListProductsOutput {
  products: Product[];
}

function createBaseProduct(): Product {
  return { id: 0, name: "", description: "", imageSrc: "", price: 0, quantity: 0 };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).sint32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.imageSrc !== "") {
      writer.uint32(34).string(message.imageSrc);
    }
    if (message.price !== 0) {
      writer.uint32(40).sint32(message.price);
    }
    if (message.quantity !== 0) {
      writer.uint32(48).sint32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.sint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageSrc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.price = reader.sint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.quantity = reader.sint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      imageSrc: isSet(object.imageSrc) ? globalThis.String(object.imageSrc) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.imageSrc !== "") {
      obj.imageSrc = message.imageSrc;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.imageSrc = object.imageSrc ?? "";
    message.price = object.price ?? 0;
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseCreateProductInput(): CreateProductInput {
  return { name: "", description: "", imageSrc: "", price: 0, quantity: 0 };
}

export const CreateProductInput: MessageFns<CreateProductInput> = {
  encode(message: CreateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.imageSrc !== "") {
      writer.uint32(34).string(message.imageSrc);
    }
    if (message.price !== 0) {
      writer.uint32(40).sint32(message.price);
    }
    if (message.quantity !== 0) {
      writer.uint32(48).sint32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageSrc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.price = reader.sint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.quantity = reader.sint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductInput {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      imageSrc: isSet(object.imageSrc) ? globalThis.String(object.imageSrc) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: CreateProductInput): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.imageSrc !== "") {
      obj.imageSrc = message.imageSrc;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductInput>, I>>(base?: I): CreateProductInput {
    return CreateProductInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductInput>, I>>(object: I): CreateProductInput {
    const message = createBaseCreateProductInput();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.imageSrc = object.imageSrc ?? "";
    message.price = object.price ?? 0;
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseCreateProductOutput(): CreateProductOutput {
  return { id: 0 };
}

export const CreateProductOutput: MessageFns<CreateProductOutput> = {
  encode(message: CreateProductOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductOutput {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: CreateProductOutput): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductOutput>, I>>(base?: I): CreateProductOutput {
    return CreateProductOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductOutput>, I>>(object: I): CreateProductOutput {
    const message = createBaseCreateProductOutput();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetProductInput(): GetProductInput {
  return { id: 0 };
}

export const GetProductInput: MessageFns<GetProductInput> = {
  encode(message: GetProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductInput {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetProductInput): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductInput>, I>>(base?: I): GetProductInput {
    return GetProductInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductInput>, I>>(object: I): GetProductInput {
    const message = createBaseGetProductInput();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetProductOutput(): GetProductOutput {
  return { product: undefined };
}

export const GetProductOutput: MessageFns<GetProductOutput> = {
  encode(message: GetProductOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductOutput {
    return { product: isSet(object.product) ? Product.fromJSON(object.product) : undefined };
  },

  toJSON(message: GetProductOutput): unknown {
    const obj: any = {};
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductOutput>, I>>(base?: I): GetProductOutput {
    return GetProductOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductOutput>, I>>(object: I): GetProductOutput {
    const message = createBaseGetProductOutput();
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    return message;
  },
};

function createBaseStringFilter(): StringFilter {
  return { operator: 0, value: "" };
}

export const StringFilter: MessageFns<StringFilter> = {
  encode(message: StringFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operator !== 0) {
      writer.uint32(8).int32(message.operator);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operator = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringFilter {
    return {
      operator: isSet(object.operator) ? stringFilterOperatorFromJSON(object.operator) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: StringFilter): unknown {
    const obj: any = {};
    if (message.operator !== 0) {
      obj.operator = stringFilterOperatorToJSON(message.operator);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringFilter>, I>>(base?: I): StringFilter {
    return StringFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringFilter>, I>>(object: I): StringFilter {
    const message = createBaseStringFilter();
    message.operator = object.operator ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInt32Range(): Int32Range {
  return { from: 0, to: 0 };
}

export const Int32Range: MessageFns<Int32Range> = {
  encode(message: Int32Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.from !== 0) {
      writer.uint32(8).int32(message.from);
    }
    if (message.to !== 0) {
      writer.uint32(16).int32(message.to);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Int32Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInt32Range();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.from = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.to = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Int32Range {
    return {
      from: isSet(object.from) ? globalThis.Number(object.from) : 0,
      to: isSet(object.to) ? globalThis.Number(object.to) : 0,
    };
  },

  toJSON(message: Int32Range): unknown {
    const obj: any = {};
    if (message.from !== 0) {
      obj.from = Math.round(message.from);
    }
    if (message.to !== 0) {
      obj.to = Math.round(message.to);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Int32Range>, I>>(base?: I): Int32Range {
    return Int32Range.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Int32Range>, I>>(object: I): Int32Range {
    const message = createBaseInt32Range();
    message.from = object.from ?? 0;
    message.to = object.to ?? 0;
    return message;
  },
};

function createBaseInt32Filter(): Int32Filter {
  return { operator: 0, value: undefined, range: undefined };
}

export const Int32Filter: MessageFns<Int32Filter> = {
  encode(message: Int32Filter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operator !== 0) {
      writer.uint32(8).int32(message.operator);
    }
    if (message.value !== undefined) {
      writer.uint32(16).int32(message.value);
    }
    if (message.range !== undefined) {
      Int32Range.encode(message.range, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Int32Filter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInt32Filter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operator = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.range = Int32Range.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Int32Filter {
    return {
      operator: isSet(object.operator) ? int32FilterOperatorFromJSON(object.operator) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
      range: isSet(object.range) ? Int32Range.fromJSON(object.range) : undefined,
    };
  },

  toJSON(message: Int32Filter): unknown {
    const obj: any = {};
    if (message.operator !== 0) {
      obj.operator = int32FilterOperatorToJSON(message.operator);
    }
    if (message.value !== undefined) {
      obj.value = Math.round(message.value);
    }
    if (message.range !== undefined) {
      obj.range = Int32Range.toJSON(message.range);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Int32Filter>, I>>(base?: I): Int32Filter {
    return Int32Filter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Int32Filter>, I>>(object: I): Int32Filter {
    const message = createBaseInt32Filter();
    message.operator = object.operator ?? 0;
    message.value = object.value ?? undefined;
    message.range = (object.range !== undefined && object.range !== null)
      ? Int32Range.fromPartial(object.range)
      : undefined;
    return message;
  },
};

function createBaseListFilter(): ListFilter {
  return { id: undefined, name: undefined, price: undefined, inStock: undefined };
}

export const ListFilter: MessageFns<ListFilter> = {
  encode(message: ListFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined) {
      StringFilter.encode(message.name, writer.uint32(18).fork()).join();
    }
    if (message.price !== undefined) {
      Int32Filter.encode(message.price, writer.uint32(26).fork()).join();
    }
    if (message.inStock !== undefined) {
      writer.uint32(32).bool(message.inStock);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = StringFilter.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = Int32Filter.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.inStock = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFilter {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      name: isSet(object.name) ? StringFilter.fromJSON(object.name) : undefined,
      price: isSet(object.price) ? Int32Filter.fromJSON(object.price) : undefined,
      inStock: isSet(object.inStock) ? globalThis.Boolean(object.inStock) : undefined,
    };
  },

  toJSON(message: ListFilter): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined) {
      obj.name = StringFilter.toJSON(message.name);
    }
    if (message.price !== undefined) {
      obj.price = Int32Filter.toJSON(message.price);
    }
    if (message.inStock !== undefined) {
      obj.inStock = message.inStock;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFilter>, I>>(base?: I): ListFilter {
    return ListFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFilter>, I>>(object: I): ListFilter {
    const message = createBaseListFilter();
    message.id = object.id ?? undefined;
    message.name = (object.name !== undefined && object.name !== null)
      ? StringFilter.fromPartial(object.name)
      : undefined;
    message.price = (object.price !== undefined && object.price !== null)
      ? Int32Filter.fromPartial(object.price)
      : undefined;
    message.inStock = object.inStock ?? undefined;
    return message;
  },
};

function createBaseListProductsInput(): ListProductsInput {
  return { filters: [] };
}

export const ListProductsInput: MessageFns<ListProductsInput> = {
  encode(message: ListProductsInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.filters) {
      ListFilter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters.push(ListFilter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsInput {
    return {
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => ListFilter.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProductsInput): unknown {
    const obj: any = {};
    if (message.filters?.length) {
      obj.filters = message.filters.map((e) => ListFilter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProductsInput>, I>>(base?: I): ListProductsInput {
    return ListProductsInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProductsInput>, I>>(object: I): ListProductsInput {
    const message = createBaseListProductsInput();
    message.filters = object.filters?.map((e) => ListFilter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProductsOutput(): ListProductsOutput {
  return { products: [] };
}

export const ListProductsOutput: MessageFns<ListProductsOutput> = {
  encode(message: ListProductsOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsOutput {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProductsOutput): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProductsOutput>, I>>(base?: I): ListProductsOutput {
    return ListProductsOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProductsOutput>, I>>(object: I): ListProductsOutput {
    const message = createBaseListProductsOutput();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

export type ProductServiceService = typeof ProductServiceService;
export const ProductServiceService = {
  createProduct: {
    path: "/product.ProductService/CreateProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateProductInput) => Buffer.from(CreateProductInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateProductInput.decode(value),
    responseSerialize: (value: CreateProductOutput) => Buffer.from(CreateProductOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateProductOutput.decode(value),
  },
  getProduct: {
    path: "/product.ProductService/GetProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProductInput) => Buffer.from(GetProductInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetProductInput.decode(value),
    responseSerialize: (value: GetProductOutput) => Buffer.from(GetProductOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetProductOutput.decode(value),
  },
  listProducts: {
    path: "/product.ProductService/ListProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProductsInput) => Buffer.from(ListProductsInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListProductsInput.decode(value),
    responseSerialize: (value: ListProductsOutput) => Buffer.from(ListProductsOutput.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListProductsOutput.decode(value),
  },
} as const;

export interface ProductServiceServer extends UntypedServiceImplementation {
  createProduct: handleUnaryCall<CreateProductInput, CreateProductOutput>;
  getProduct: handleUnaryCall<GetProductInput, GetProductOutput>;
  listProducts: handleUnaryCall<ListProductsInput, ListProductsOutput>;
}

export interface ProductServiceClient extends Client {
  createProduct(
    request: CreateProductInput,
    callback: (error: ServiceError | null, response: CreateProductOutput) => void,
  ): ClientUnaryCall;
  createProduct(
    request: CreateProductInput,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateProductOutput) => void,
  ): ClientUnaryCall;
  createProduct(
    request: CreateProductInput,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateProductOutput) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductInput,
    callback: (error: ServiceError | null, response: GetProductOutput) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductInput,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetProductOutput) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductInput,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetProductOutput) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsInput,
    callback: (error: ServiceError | null, response: ListProductsOutput) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsInput,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListProductsOutput) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsInput,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListProductsOutput) => void,
  ): ClientUnaryCall;
}

export const ProductServiceClient = makeGenericClientConstructor(
  ProductServiceService,
  "product.ProductService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProductServiceClient;
  service: typeof ProductServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
